#!/usr/bin/env node

var _ = require('lodash');
var fs = require('fs');
var moment = require('moment');
var program = require('commander');
var async = require('async');
var utils = require('./cli-utils');
program = utils.configureCommander(program);


program
  .option('-o, --output <file>', 'get JSON output in file')
  .option('-s, --skip <n>', 'skip the first n transactions (0 by default)')
  .option('-p, --page <n>', 'download page size')
  .option('-l, --limit <n>', 'limit download to n transactions')
  .option('-i, --info', 'include extended info');

program
  .parse(process.argv);

var args = program.args;

var skip = +program.skip || 0,
  page = +program.page || 55,
  limit = +program.limit,
  got;

console.warn("* TX History:")
var allTxs = [];
utils.getClient(program, {
  mustExist: true
}, function(client) {

  var l=0;
  async.doWhilst(
    function(cb) {
      console.warn('* Getting: %d => %d Got:', skip, skip + page, l);
      client.getTxHistory({
        skip: skip,
        limit: page + 1,
      }, function(err, txs) {
        got = txs.length;
        l += got;

        if (_.isEmpty(txs))
          return;

        if (got > page)
          txs.pop();

        if (program.output) {
          allTxs.push(txs);
          fs.writeFile(program.output, JSON.stringify(allTxs), {
            encoding: 'utf8'
          }, function(err) {
            if (err) console.error(err);
            console.warn('Output file updated')
          });

        } else {
          _.each(txs, function(tx) {
            var time = moment(tx.time * 1000).fromNow();
            var amount = utils.renderAmount(tx.amount);
            var confirmations = tx.confirmations || 0;
            var proposal = tx.proposalId ? '["' + tx.message + '" by ' + tx.creatorName + '] ' : '';
            switch (tx.action) {
              case 'received':
                direction = '<=';
                break;
              case 'moved':
                direction = '==';
                break;
              case 'sent':
                direction = '=>';
                break;
              default:
                direction = tx.action;
                break;
            }
            console.log("\t%s: %s %s %s %s(%s confirmations)", time, direction, tx.action, amount, proposal, confirmations);
          });
        }
        cb();
      });
    },
    function() {
      var cont = got > page;
      if (program.limit && l > program.limit)
        cont = 0;

      if (cont) {
        skip += page;
      }
      return cont;
    },
    function(err) {
      console.log(err);
    }
  );
});
